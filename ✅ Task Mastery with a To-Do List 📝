import tkinter as tk
from tkinter import messagebox
from datetime import datetime
import threading
import time

# Function to add a new task
def add_task():
    task = task_entry.get()
    reminder = reminder_entry.get()
    category = category_var.get()
    if task != "":
        task_detail = f"{task} - Category: {category} | Reminder: {reminder if reminder else 'None'}"
        lb.insert(tk.END, task_detail)
        task_entry.delete(0, "end")
        reminder_entry.delete(0, "end")
        task_entry.focus()  # Reset focus to task entry
    else:
        messagebox.showwarning("Warning", "Please enter a task.")

# Function to delete a selected task
def delete_task():
    try:
        lb.delete(tk.ANCHOR)
    except Exception as e:
        messagebox.showwarning("Warning", "Please select a task to delete.")

# Function to mark a task as completed
def complete_task():
    try:
        selected_task = lb.get(tk.ANCHOR)
        lb.delete(tk.ANCHOR)
        lb.insert(tk.END, f"{selected_task} - COMPLETED")
    except Exception as e:
        messagebox.showwarning("Warning", "Please select a task to mark as completed.")

# Function to check and show reminders at the right time
def check_reminders():
    while True:
        current_time = datetime.now().strftime("%H:%M")
        for idx in range(lb.size()):
            task_detail = lb.get(idx)
            if "Reminder:" in task_detail:
                reminder_time = task_detail.split("Reminder:")[1].strip()
                if reminder_time == current_time:
                    messagebox.showinfo("Reminder", f"Time to do: {task_detail.split(' - ')[0]}")
        time.sleep(60)  # Check every minute

# Function to move focus to the next input field
def focus_next(event, next_widget):
    next_widget.focus()
    return "break"

# Create the main window
ws = tk.Tk()
ws.geometry("950x650")
ws.title("My To-Do List")
ws.config(bg="#E3F2FD")

# Sidebar for task categories
sidebar_frame = tk.Frame(ws, bg="#BBDEFB", width=250)
sidebar_frame.pack(side=tk.LEFT, fill=tk.Y)

# Category List (can be expanded dynamically)
category_listbox = tk.Listbox(sidebar_frame, bg="#90CAF9", fg="#0D47A1", font=("Arial", 14), bd=0, selectmode=tk.SINGLE)
category_listbox.insert(tk.END, "Work")
category_listbox.insert(tk.END, "Personal")
category_listbox.insert(tk.END, "Shopping")
category_listbox.pack(fill=tk.BOTH, padx=10, pady=20)

# Task List and Details Section
task_frame = tk.Frame(ws, bg="#E3F2FD")
task_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

# Task List Box with larger size and scrollbar
lb = tk.Listbox(task_frame, width=50, height=15, font=("Arial", 14), bd=0, fg='#0D47A1', selectbackground='#64B5F6', activestyle=None)
lb.pack(padx=20, pady=20)

# Scrollbar for task list
sb = tk.Scrollbar(task_frame)
sb.pack(side=tk.RIGHT, fill=tk.Y)
lb.config(yscrollcommand=sb.set)
sb.config(command=lb.yview)

# Entry for task creation
task_label = tk.Label(task_frame, text="Enter your task:", font=('Arial', 16), bg="#E3F2FD", fg="#0D47A1")
task_label.pack(pady=5)

task_entry = tk.Entry(task_frame, font=('Arial', 18), width=40, bg="#BBDEFB", fg="#0D47A1")
task_entry.pack(pady=10)

# Entry for reminder time
reminder_label = tk.Label(task_frame, text="Set a reminder (HH:MM, Optional):", font=('Arial', 16), bg="#E3F2FD", fg="#0D47A1")
reminder_label.pack(pady=5)

reminder_entry = tk.Entry(task_frame, font=('Arial', 18), width=40, bg="#BBDEFB", fg="#0D47A1")
reminder_entry.insert(0, "e.g., 12:30")
reminder_entry.pack(pady=10)

# Category dropdown
category_label = tk.Label(task_frame, text="Select Category:", font=('Arial', 16), bg="#E3F2FD", fg="#0D47A1")
category_label.pack(pady=5)

category_var = tk.StringVar()
category_var.set("Work")  # Default category
category_menu = tk.OptionMenu(task_frame, category_var, "Work", "Personal", "Shopping", "Other")
category_menu.config(font=("Arial", 16), width=15, bg="#BBDEFB", fg="#0D47A1")
category_menu.pack(pady=10)

# Task Buttons (Add, Delete, Complete)
button_frame = tk.Frame(task_frame, bg="#E3F2FD")
button_frame.pack(pady=20)

add_button = tk.Button(button_frame, text="Add Task", font=('Arial', 14), bg="#64B5F6", padx=20, pady=10, command=add_task)
add_button.pack(fill=tk.BOTH, expand=True, side=tk.LEFT)

del_button = tk.Button(button_frame, text="Delete Task", font=('Arial', 14), bg="#EF9A9A", padx=20, pady=10, command=delete_task)
del_button.pack(fill=tk.BOTH, expand=True, side=tk.LEFT)

complete_button = tk.Button(button_frame, text="Complete Task", font=('Arial', 14), bg="#81C784", padx=20, pady=10, command=complete_task)
complete_button.pack(fill=tk.BOTH, expand=True, side=tk.LEFT)

# Bind Enter key to move focus
task_entry.bind("<Return>", lambda e: focus_next(e, reminder_entry))
reminder_entry.bind("<Return>", lambda e: focus_next(e, category_menu))
category_menu.bind("<Return>", lambda e: add_task())

# Reminder Checking in a Separate Thread
reminder_thread = threading.Thread(target=check_reminders, daemon=True)
reminder_thread.start()

# Run the main loop
ws.mainloop()
